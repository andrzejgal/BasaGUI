/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pMainWindow;

import javax.swing.JFrame;
//import javax.swing.table.TableModel;
import javax.swing.table.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.Timer;
import javax.swing.JLabel;
//import pServerReadEPC.RFIDServer;
//import pDataBase.*;
import pGlobals.*;
import java.util.logging.*;
import java.util.ArrayList;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.*;
import java.awt.Event;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Event;
import java.awt.event.MouseEvent;
//import pBasaCmdLineInterfaces.ExceptionDescription;
//import static pBasaCmdLineInterfaces.ExceptionDescription.ExceptionDescription;
import javax.swing.table.DefaultTableCellRenderer;
//import javax.swing.JOptionPane;
//import pServerStart.*;
//import pServerWriteEPC.WrittingStart;
//import static pInitialization.Initialization.CreateDataBase;
import pLookAndFeel.*;
import pDialogs.*;
import pLogging.LoggerConfigurationClass;
import static pMainWindow.Okno.RefreshTable;
import pServerWriteEPC.WritingToBase;
import pCheckReadLabels.*;
import pServers.*;
import pRandomEPC.GenerateEPC;
import pDataBase1.*;
import pErrorCodes.ErrorCodes;
import static pMainWindow.Okno.writeDataBaseToTable;
import java.lang.AssertionError;
import pLogging.LoggingConfigException;
//import pServerWriteEPC.WritingToBase;
import pChangeStatusInThread.DaoChangeStatus;

/**
 *
 * @author Andrzej
 */
public class Okno extends JFrame {

    static String[] ReadEPCs = new String[globals.EPCquantity];
     static ServerSocket MSServer;
    static Socket sck;
    //static WrittingStart Readstart;
    static Logger logA;
    static LookAndFeel Laf;
    static public Logger MainWindowLogger = Logger.getLogger(globals.MainWindowLoggerName);
    static  ReadLabelsList RDL;
    static  SingleThreadedServer Sts;
   static  WritingToBase wtbase;
    static Connection cnn=null;
    static Connection SingleThreadConnection=null;
    static Connection ConnChangeStatus=null;


    /**
     * Creates new form Okno
     */
    public Okno() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        panel = new javax.swing.JPanel();
        scrollpane = new javax.swing.JScrollPane();
        LabelsTable = new javax.swing.JTable();
        Sprzedaz = new javax.swing.JButton();
        Przyjecie = new javax.swing.JButton();
        MainMenu = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Szukaj = new javax.swing.JMenu();
        Edytuj = new javax.swing.JMenu();
        WyswietlBaze = new javax.swing.JMenu();
        Dzialania = new javax.swing.JMenu();
        MenuUtworzBaze = new javax.swing.JMenuItem();
        MenuUtworzTabele = new javax.swing.JMenuItem();
        MenuKasujTabele = new javax.swing.JMenuItem();
        MenuKasujBaze = new javax.swing.JMenuItem();
        Test = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toolbar.setRollover(true);

        panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        panel.setLayout(new java.awt.BorderLayout());

        LabelsTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LabelsTable.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        LabelsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numer", "EPC", "Status", "Data", "Nazwa", "Rozmiar", "Kolor"
            }
        ));
        LabelsTable.setGridColor(new java.awt.Color(0, 51, 255));
        LabelsTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        LabelsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LabelsTableMouseClicked(evt);
            }
        });
        scrollpane.setViewportView(LabelsTable);
        TableColumnModel columnModel = LabelsTable.getColumnModel();
        TableColumn column = columnModel.getColumn(1);
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(JLabel.RIGHT);
        column.setCellRenderer(renderer);

        panel.add(scrollpane, java.awt.BorderLayout.CENTER);

        Sprzedaz.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Sprzedaz.setText("Sprzedaż");
        Sprzedaz.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SprzedazMousePressed(evt);
            }
        });
        Sprzedaz.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SprzedazKeyPressed(evt);
            }
        });

        Przyjecie.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Przyjecie.setText("Przyjęcie");
        Przyjecie.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PrzyjecieMousePressed(evt);
            }
        });
        Przyjecie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PrzyjecieKeyPressed(evt);
            }
        });

        File.setText("File");
        MainMenu.add(File);

        Szukaj.setText("Szukaj");
        MainMenu.add(Szukaj);

        Edytuj.setText("Edytuj");
        MainMenu.add(Edytuj);

        WyswietlBaze.setText("Wyswietl bazę");
        MainMenu.add(WyswietlBaze);

        Dzialania.setText("Działania na bazie");

        MenuUtworzBaze.setLabel("Utwórz bazę");
        MenuUtworzBaze.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuUtworzBazeMouseClicked(evt);
            }
        });
        Dzialania.add(MenuUtworzBaze);

        MenuUtworzTabele.setText("Utwórz tabelę");
        Dzialania.add(MenuUtworzTabele);

        MenuKasujTabele.setText("Kasuj tabelę");
        Dzialania.add(MenuKasujTabele);

        MenuKasujBaze.setText("Kasuj bazę");
        Dzialania.add(MenuKasujBaze);

        MainMenu.add(Dzialania);

        Test.setText("Test");
        MainMenu.add(Test);

        setJMenuBar(MainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(Sprzedaz)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Przyjecie)
                .addGap(101, 101, 101)
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Sprzedaz)
                        .addComponent(Przyjecie)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SprzedazKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SprzedazKeyPressed
        // TODO add your handling code here:
        globals.ReadingEPCFromAntenna = false;
        super.setTitle("Główne okno - sprzedaż");
        MainWindowLogger.logp(Level.FINER, "Okno", "SprzedazKeyPressed", "");
    }//GEN-LAST:event_SprzedazKeyPressed

    private void SprzedazMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SprzedazMousePressed
        // TODO add your handling code here:
        globals.ReadingEPCFromAntenna = false;
        super.setTitle("Główne okno - sprzedaż");
 //        assert globals. LabelList==null:" globals. LabelList is null in SprzedazMousePressed";
        if (globals.LabelList!=null) { //globals.LabelList==null gdy nie było wcześnie klikniete sprzedaż
            globals.LabelList.CloseConnection();
            globals. LabelList.dispose();
        };
         MainWindowLogger.logp(Level.FINER, "Okno", "SprzedazMousePressed", "");
    }//GEN-LAST:event_SprzedazMousePressed

    private void PrzyjecieMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PrzyjecieMousePressed
        // TODO add your handling code here:
        globals.ReadingEPCFromAntenna = true;
 /*
        super.setTitle("Główne okno - przyjęcie");
        MainWindowLogger.logp(Level.FINER, "Okno", "PrzyjecieMousePressed", "");
//         assert globals. LabelList==null:" globals. LabelList is null in PrzyjecieMousePressed";
   */
            globals.LabelList =new  ReadLabelsList() ;
            globals.LabelList.setLocationRelativeTo(null);
            globals.LabelList.setVisible(true);
    }//GEN-LAST:event_PrzyjecieMousePressed

    private void PrzyjecieKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PrzyjecieKeyPressed
        // TODO add your handling code here:
        globals.ReadingEPCFromAntenna = true;
        super.setTitle("Główne okno - przyjęcie");
        MainWindowLogger.logp(Level.FINER, "Okno", "PrzyjecieKeyPressedeyPressed", "");
    }//GEN-LAST:event_PrzyjecieKeyPressed

    private void MenuUtworzBazeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuUtworzBazeMouseClicked
        // TODO add your handling code here:
//try {
 //           DataBaseActions.CreateDataBase();
//        } catch (DAOException e) {
            //           ShowExceptionMessageAndExit();
  //          ExceptionMessage.ShowExceptionMessageAndExit("Błąd w funkcji MenuUtworzBazeMouseClicked");
  //      }
    }//GEN-LAST:event_MenuUtworzBazeMouseClicked

    private void LabelsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelsTableMouseClicked
        // TODO add your handling code here:
       MainWindowLogger.logp(Level.FINER, "Okno", "LabelsTableMouseClicked", "Start");
        if (evt.getButton()==MouseEvent.BUTTON3) {
          int row = LabelsTable.rowAtPoint(evt.getPoint());
          int col =LabelsTable.columnAtPoint(evt.getPoint());
          if (col!=2) return;
          String EPC=LabelsTable.getValueAt(row, 1).toString();
          String Idd=LabelsTable.getValueAt(row, 0).toString();
          int Id=Integer.parseInt(Idd);
          try {
//              ConnChangeStatus=StaticConnectToDatabase.Connect();
 //             MainWindowLogger.logp(Level.FINER, "Okno", "Zostało otwarte połączenie z bazą", "LabelsTableMouseClicked");
              DaoChangeStatus dcs=new DaoChangeStatus(globals.TableName,EPC,ConnChangeStatus);
              new Thread(dcs).start();
              LabelsTable.repaint();
              MainWindowLogger.logp(Level.FINER, "Okno", "LabelsTableMouseClicked", "Koniec");

          }
          catch (Exception e)
          {
            MainWindowLogger.logp(Level.FINER, "Okno", "Wyjątek przy tworzeniu wątku", "LabelsTableMouseClicked");
             new RuntimeException("Wyjątek w LabelsTableMouseClicked"+e.getMessage());
          }
 /*         
          finally {
              try {
              if (ConnChangeStatus!=null){
                  ConnChangeStatus.close();
                  MainWindowLogger.logp(Level.FINER, "Okno", "Finally połączenie z baza zostało zamknięte", "LabelsTableMouseClicked");
              }
              }
              catch (SQLException e) {
                 MainWindowLogger.logp(Level.FINER, "Okno", "Wyjątek przy zamknięciu połączenia z bazą", "LabelsTableMouseClicked");
                 new RuntimeException("Wyjątek w LabelsTableMouseClicked - zamknięcie Connection"+e.getMessage());
              }
          }//finally
*/          
            
        }
    }//GEN-LAST:event_LabelsTableMouseClicked
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       globals.ReadingEPCFromAntenna = false;
         try {
            Laf = new LookAndFeel();
            assert(Laf!=null):"wskaźnik doLookAndFeel jest null";
            Laf.CreateLookAndFeel("Windows");

            LoggerConfigurationClass.ReadLoggerConfiguration();

            LoggerConfigurationClass.AddLogger(DAOfunctions.DAOloggger);
            LoggerConfigurationClass.AddLogger(LookAndFeel.LookAndFeelLogger);
            LoggerConfigurationClass.AddLogger(MainWindowLogger);
            LoggerConfigurationClass.AddLogger(StaticConnectToDatabase.StaticConnectionToDataBase);
            LoggerConfigurationClass.AddLogger(DaoChangeStatus.LabelChngeStatus);
            
            LoggerConfigurationClass.DisableParentToAlllToAll();
            LoggerConfigurationClass.RemoveAllHandlersFromAll();
            LoggerConfigurationClass.AddConsoleHandlerToAll();
            LoggerConfigurationClass.AddFileHandlerToAll(false);
            LoggerConfigurationClass.SetLoggerLevelToAll(Level.ALL);
/*****************************************************************************************/
//            StaticConnectToDatabase.SetDataBaseType(DataBaseTypesEnum.LiteSqlType);
            StaticConnectToDatabase.SetDataBaseType(DataBaseTypesEnum.SqlType);
            DAOfunctions.SetDataBaseType(DataBaseTypesEnum.SqlType);
            cnn=StaticConnectToDatabase.Connect();
             assert cnn!=null:"Connection cnn jest null w klasie Main";
            DAOfunctions daof= new DAOfunctions(cnn);        
                daof.CreateTable(globals.TableName);
        Connection SingleThreadConnection=StaticConnectToDatabase.Connect();
        assert(SingleThreadConnection!=null):"Wskażnik do SingleThreadConnection jest null";
//DAO0 used in ReadLabelsList.java     
            Sts=new SingleThreadedServer(globals.Port,SingleThreadConnection);
            new Thread(Sts).start();
          MainWindowLogger.logp(Level.FINEST, "Okno", "Main", "Reading EPC thread has started");
            wtbase =new WritingToBase ();
            new Thread(wtbase).start();
           MainWindowLogger.logp(Level.FINEST, "Okno", "Main", "Writing EPC thread has started");

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    //               public Okno ok;
                    Okno ok = new Okno();
                    ok.setTitle("Główne okno - sprzedaż");
                    ok.setExtendedState(JFrame.MAXIMIZED_BOTH);
                    ok.setVisible(true);
                    RefreshTable();

                }
            });
            

       Timer timer=new Timer(500,new MyTimerActionListener());
       timer.start();
       timer.setDelay(500);
/*********************************************************************************/
         }
         catch (LookAndFeelException | LoggingConfigException e) {
            ExceptionMessage.ShowExceptionMessage("Błąd LookAndFeel " + e.getMessage());
         }
/***********************************************************************************/
         catch (StaticConnectToDatabaseException e) {
           int exit_code=e.GetExitCode();
           String mess=e.GetInterMessage();
           String message_full=mess+"\n\r"+"Błąd połączenie z bazą danych";
           ExceptionMessage.ShowExceptionMessageAndExit1(message_full,exit_code);
         }
/************************************************************************************/
         catch (DAOfunctionException e) {
           int exit_code=e.GetExitCode();
           String mess=e.GetInterMessage();
           String message_full=mess/*+"\n\r"+"Błąd połączenie z bazą danych"*/;
           ExceptionMessage.ShowExceptionMessageAndExit1(message_full,exit_code);
             
         }
/*************************************************************************************/
        catch (java.lang.AssertionError r) {
            ExceptionMessage.ShowExceptionMessage("Błąd assercji w klasie Main : " + r.getMessage());
        }
         finally {
             try  {
                   if (cnn!=null) cnn.close();
             }
            catch (SQLException e) {
                 MainWindowLogger.logp(Level.SEVERE, "Okno", "Main",e+"\n\rBłąd przy zamknięciu cnn2 ");
                 int exit_code=ErrorCodes. writeDataBaseToTableClosingconnectionError.ordinal();
                 ExceptionMessage.ShowExceptionMessageAndExit1("Błąd funcji writeDataBaseToTable zamknięcie cnn2 ",exit_code);
                        }
         
           MainWindowLogger.logp(Level.FINEST, "Okno", "Main", "Finally wyjście");
           try {
               if (SingleThreadConnection!=null) SingleThreadConnection.close();
           }
           catch (SQLException e) {
                 MainWindowLogger.logp(Level.SEVERE, "Okno","SingleThreadConnection",e+"\n\rBłąd przy zamknięciu SingleThreadConnection ");
                 int exit_code=ErrorCodes.SingleThreadConnectionClosingError.ordinal();
                 ExceptionMessage.ShowExceptionMessageAndExit1("Błąd przy zamknięciu SingleThreadConnection ",exit_code);
               
           }
        }
         
         
   

    }

    static void writeDataBaseToTable() {
        
        String ClassName="MainProgram";
        String MethodName="writeDataBaseToTable";
        MainWindowLogger.entering(ClassName, MethodName);
         DefaultTableModel md = (DefaultTableModel) LabelsTable.getModel();
        assert LabelsTable!=null:"assertion LabelsTable null in writeDataBaseToTable";
//       assert md!=null:"assertion LabelsTable TableMode is null";
        md.setRowCount(0);
        Connection cnn2=null;
//        String Status=null;
        String stt=null;
        ArrayList<String[]> ar=new ArrayList<>();
        try {
            cnn2=StaticConnectToDatabase.Connect();
            assert(cnn2!=null):"wskaźnik do Connection cnn2 w funkcji writeDataBaseToTable() jest null";
            DAOfunctions daof=new DAOfunctions(cnn2);
                    ar=daof.ReadEPCs(globals.TableName);
                    for (String[]item  : ar) {
                  /*
                           String Id=item[0];
                           String EPC=item[1];
                           String status=item[2];
                           String data=item[3];
                           String nazwa=item[4];
                           String rozmiar=item[5];
                           String kolor=item[6];
                   */
                    switch (item[2]) {
                    case "0":
                        stt = "unsold";
                        break;
                    case "1":
                        stt = "sold";
                        break;
                    default:
                        stt = "unknown";
                }
                md.addRow(new Object[]{item[0], item[1], stt,item[3],item[4],item[5],item[6]});
                     }//for (String[]item  : ar)

 //               }//try(DAOfunctions daof=new DAOfunctions(cnn))
                    MainWindowLogger.exiting(ClassName, MethodName);
            }
        catch (StaticConnectToDatabaseException stb ) {
           int exit_code=stb.GetExitCode();
           String mess=stb.GetInterMessage();
           String message_full=mess+"\n\r"+"Błąd połączenie z bazą danych w funkcji WriteDataBaseToTable";
           ExceptionMessage.ShowExceptionMessageAndExit1(message_full,exit_code);
//           System.exit();
        }
        catch (DAOfunctionException e) {
           int exit_code=e.GetExitCode();
           String mess=e.GetInterMessage();
           String message_full=mess+"\n\r"+"Błąd bazy danych w funkcji WriteDataBaseToTable";
           ExceptionMessage.ShowExceptionMessageAndExit1(message_full,exit_code);
            
        }
        finally {
            try {
                if (cnn2!=null) cnn2.close();
                MainWindowLogger.logp(Level.FINER, ClassName,MethodName,"Zwalniam Connection cnn  w funkcji writeDataBaseToTable");
           }
            catch (SQLException e) {
                 MainWindowLogger.logp(Level.SEVERE, ClassName, MethodName,e+"\n\rBłąd przy zamknięciu cnn2 ");
                 int exit_code=ErrorCodes. writeDataBaseToTableClosingconnectionError.ordinal();
                 ExceptionMessage.ShowExceptionMessageAndExit1("Błąd funcji writeDataBaseToTable zamknięcie cnn2 ",exit_code);
                        }
        }//finally
}

    public static void RefreshTable()  {
            writeDataBaseToTable();
    }
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Dzialania;
    private javax.swing.JMenu Edytuj;
    private javax.swing.JMenu File;
    public static javax.swing.JTable LabelsTable;
    private javax.swing.JMenuBar MainMenu;
    private javax.swing.JMenuItem MenuKasujBaze;
    private javax.swing.JMenuItem MenuKasujTabele;
    private javax.swing.JMenuItem MenuUtworzBaze;
    private javax.swing.JMenuItem MenuUtworzTabele;
    private javax.swing.JButton Przyjecie;
    private javax.swing.JButton Sprzedaz;
    private javax.swing.JMenu Szukaj;
    private javax.swing.JMenu Test;
    private javax.swing.JMenu WyswietlBaze;
    private static javax.swing.JPanel panel;
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

}

  class MyTimerActionListener implements ActionListener {
      @Override
         public void actionPerformed(ActionEvent e) {
                             RefreshTable();
     }
  }



